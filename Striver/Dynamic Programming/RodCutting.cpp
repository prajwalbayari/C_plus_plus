// We are given a rod of size ‘N’. It can be cut into pieces. Each length of a piece has a particular price given by the price array. Our task is to find the maximum revenue that can be generated by selling the rod after cutting( if required) into pieces.

#include<iostream>
#include<vector>
#include<limits.h>
using namespace std;

//Memoization
int rodCut(int idx,int rod,vector<int>& price,vector<vector<int>>& dp){
    if(rod==0)
        return 0;
    if(idx==0)
        return (rod/(idx+1))*price[0];
    if(dp[idx][rod]!=-1)
        return dp[idx][rod];
    int dont=rodCut(idx-1,rod,price,dp),take=0;
    if(rod>=idx+1)
        take=rodCut(idx,rod-idx-1,price,dp)+price[idx];
    return dp[idx][rod]=max(dont,take);
}

//Tabulation
int rodCut(int rod,vector<int>& price,vector<vector<int>>& dp){
    int n=price.size();
    for(int i=0;i<=rod;i++)
        dp[0][i]=(i)*price[0];
    for(int i=1;i<n;i++){
        for(int j=0;j<=rod;j++){
            int dont=dp[i-1][j],take=0;
            if(j>=i+1)
                take=dp[i][j-i-1]+price[i];
            dp[i][j]=max(dont,take);
        }
    }
    return dp[n-1][rod];
}

//Space optimization
int rodCut(int rod,vector<int>& price){
    int n=price.size();
    vector<int> prev(rod+1,0),cur(rod+1,0);
    for(int i=0;i<=rod;i++)
        prev[i]=(i)*price[0];
    for(int i=1;i<n;i++){
        for(int j=0;j<=rod;j++){
            int dont=prev[j],take=0;
            if(j>=i+1)
                take=cur[j-i-1]+price[i];
            cur[j]=max(dont,take);
        }
        prev=cur;
    }
    return prev[rod];
}

int main(){
    int n,rod;
    cout<<"Enter the number of measures: ";
    cin>>n;
    vector<int> price(n);
    cout<<"Enter the price of the rods\n";
    for(int i=0;i<n;i++)
        cin>>price[i];
    
    cout<<"Enter the rod size: ";
    cin>>rod;
    vector<vector<int>> dp(n,vector<int>(rod+1,-1));
    cout<<"The maximum profit that can be obtained is: "<<rodCut(rod,price);
}